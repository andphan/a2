What to fix from assignment 1

camera movement
event handler
spawn locations






Assignment #2: Multi-Player Games with 3P Cameras
Due: Friday, March 13
th (2½ weeks)
The objective of this assignment is to learn about third-person cameras, display systems, and
multi-player “split-screen” games, by upgrading your “Treasure Hunt 2015” game from A1, such
that it that meets additional requirements described below. Your game will now provide each of
two players with their own viewport (on a shared screen). Each player has their own avatar, and
separate controls for third-person cameras. The “game world” consists of the treasures as
before, but also a flat ground plane (e.g. the Y=0 plane) on which reside the treasures, the
treasure chest, and on which each player manipulates his/her avatar. The game must also
provide two HUD elements showing relevant game data for each player.



As before, you are welcome to add features of your own, in addition to the basic requirements,
as long as your program complies with the implementation details described below. And again,
your game’s features must be clearly described in a “Player’s Guide” that you also submit.
Game Requirements


 Implement a 3rd-person Camera Controller, either a chase camera or an orbit camera. It
may be simplest to implement an orbit camera, since we went over that in class in fair detail.
If you implement an orbit camera it must provide facilities for orbiting the camera both with
and without altering the avatar’s heading, and for zooming the camera in and out on the
avatar’s location. If you prefer to implement a chase camera, it must include some sort of
“spring system” so that it moves smoothly behind the avatar when the player changes
direction (implementing a spring system would require you to do some additional research).
 Support split-screen multi-player viewports. Each of the (two) players must be presented
with their own view of the (same) world which changes as they move their cameras.


100%

 Provide HUDs for each player, each displaying data relevant only to that player.

100%




 Include a ground plane - flat surface on which the game takes place. You may if you wish
allow players to leave the ground for a time (“jumping”), but they should not have the ability
to move continuously in arbitrary 3D directions like they did in A1. Applying scale() and
rotate() to a SAGE scene.shape.Rectangle is an easy way to define a ground plane.

100%


 Use at least two different types of SceneNode controllers written by you. For example you
could have one type of node controller which causes world objects to spin or bounce (or
something similar), and gets instantiated and applied to one set of world objects, and a
second type of node controller which causes objects to change color or to disappear after a
certain amount of time. The specifics are up to you, but they must be implemented by you
(and should extend the Sage scene.Controller class). You may also use built-in SAGE
controllers, as long as you also include two controller types of your own implementation.

100%

 Provide support for two input controllers. For example, one player might use the keyboard
and mouse while the second would use a gamepad. Or, your game could utilize two
gamepads so that players have equivalent equipment. Either approach is acceptable, but
be sure and document your implementation in your Player’s Guide.

KB/M - 100%

controller - 100%


 Your game must include at least one instance of sage.scene.Group, containing some
set of scenenode objects in your game. It may, for example, contain the treasures, or some
subset of the treasures, or some other group of objects. Whatever group you choose to
associate with the Group object, there must be at least one transform applied to the group.
For example, you could apply some translation to the group during update(). Or, you could
attach a node controller to the group. The main purpose of this requirement is for you to get
some practice working with the basic scenegraph operations.


100%

 Provide your own implementation of IDisplaySystem. As before, your game should be
defined by extending sage.app.BaseGame and overriding methods initGame() and
update(). Now, however, your program should also override initSystem()and
render() so that these functions are also provided by code written by you. You are
welcome to follow the outline given in the course notes and sample code handout.
(Note that overriding render() is not the same thing as implementing a Renderer; you may
use the JOGLRenderer implementation in the creation of your IDisplaySystem)

50%

 Your game must run in FSEM (Full-Screen Exclusive Mode), or provide an FSEM option.

100%

 As before, your treasure chest should respond to Events using the SAGE event handler.

100%

Additional Notes
 In this version of the game there is nothing stopping the player from moving the camera
completely off the ground plane (beyond the (x,z) ground plane edge). That is ok for now.
 As before, you may use the SAGE InputManager class; you do not have to write your own
input manager. However, you will now have to actually construct an InputManager, since
that is a step required in initSystem().
Deliverables
Submit to SacCT a single ZIP file containing:
1. your Java source code (.java) files,
2. the compiled (.class) files for each of your Java source files, - how to do that
3. a batch (.bat) file that runs your submission if unzipped as-is onto a lab machine,
4. a screenshot (.jpg) file showing a typical scene from your game, and
5. a short “Player’s Guide” document (2-3 pages, preferably PDF), describing:
 how to compile and run your program from a command window, - how to compile from command window
 how your game works, including how the two-player inputs work,
 how your scoring works,
 where in your program you satisfied each of the requirements,
 anything special you added to your program not specified in the requirements,
 any of the requirements that you weren’t able to get working,
 the type of gamepad your game was tested with, and
 which lab machine(s) your program works correctly on.
Note that the submitted files must be organized in the proper hierarchy in the ZIP file.